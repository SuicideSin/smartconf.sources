using System;
using System.Collections.Generic;
using CommandLine;

// ReSharper disable CheckNamespace
namespace SmartConf.Sources
// ReSharper restore CheckNamespace
{
    /// <summary>
    /// Custom configuration source wrapping a command line parser.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class CommandLineConfigurationSource<T> : IConfigurationSource<T> where T : class, new()
    {
        /// <summary>
        /// Create a new configuration source and parse the given argument
        /// array with the default command line parser.
        /// </summary>
        /// <param name="args"></param>
        public CommandLineConfigurationSource(string[] args)
            : this(args, Parser.Default)
        {
        } 

        /// <summary>
        /// Create a new configuration source and parse the given argument
        /// array with the given <see cref="Parser"/>.
        /// </summary>
        /// <param name="args"></param>
        /// <param name="parser"></param>
        public CommandLineConfigurationSource(string[] args, Parser parser)
        {
            Config = new T();
            if (!parser.ParseArguments(args, Config))
            {
                throw new ArgumentException("Could not parse arguments.");
            }
        }

        /// <summary>
        /// Parsed configuration object.
        /// </summary>
        public T Config { get; private set; }

        /// <summary>
        /// Does nothing because once created the command line arguments
        /// never change.
        /// </summary>
        public void Invalidate()
        {
        }

        /// <summary>
        /// Throws an <see cref="InvalidOperationException"/> because
        /// this configuration source cannot be saved.
        /// </summary>
        /// <exception cref="InvalidOperationException">Cannot save a read-only source.</exception>
        /// <param name="obj"></param>
        /// <param name="propertyNames"></param>
        public void PartialSave(T obj, IEnumerable<string> propertyNames)
        {
            throw new InvalidOperationException("Cannot save command line arguments.");
        }

        /// <summary>
        /// Mark this configuration source as the default source to save.
        /// </summary>
        public bool PrimarySource { get; set; }

        /// <summary>
        /// Throws an <see cref="InvalidOperationException"/> because
        /// this configuration source cannot be saved.
        /// </summary>
        /// <exception cref="InvalidOperationException">Cannot save a read-only source.</exception>
        /// <param name="obj"></param>
        public void Save(T obj)
        {
            PartialSave(obj, null);
        }

        /// <summary>
        /// This configuration source is read only, therefore it cannot be saved.
        /// </summary>
        public bool ReadOnly
        {
            get { return true; }
        }

        /// <summary>
        /// Mark the configuration file generated by the parser as required.
        /// </summary>
        public bool Required { get; set; }
    }
}
